#!/usr/bin/env bash

# #######################################################################
# this script aims to run jar file which is built on spring boot 2.3.12+.
# it supports many modes. see config/services.ini for detail.
#
# author: Leo ning <windywany@gmail.com>
# date: 2022-08-06
# version: 1.0.0
#
### do not edit this file unless you known what you are doing.###########
#########################################################################
. "$JARUN_BASE_DIR/bin/lib/common.sh"

function detect_jar_file {
    if [ -z "$APP_JAR" ]; then
        log_error "please configure 'jar' field in services.ini!!!"
        exit 1
    fi

    local SEARCH_FILES=$APP_PATH/$APP_JAR"-*.jar"

    for i in $(ls -lt $SEARCH_FILES 2>/dev/null | awk '{print $NF}' | grep jar | grep -v grep | head -n10 2>/dev/null); do
        log_debug 'find jar:' $i
        if [[ ! $i == *"-sources.jar" ]]; then
            APP_JAR_FILE=$i
            log_info "use  jar:" $(clr_str green $i)
            break
        fi
    done

    if [ -z $APP_JAR_FILE ]; then
        log_error "no jar found by" $(clr_str yellow $SEARCH_FILES)
        exit 1
    fi

    if [[ -f $RUN_JAR_FILE ]]; then
        rm -rf $RUN_JAR_FILE
    fi

    ln $APP_JAR_FILE $RUN_JAR_FILE
    return 0
}

function check_pid_alive {
    local result
    for i in $(ps aux | grep $SERVICE_HASH | grep -v grep | awk '{print $2}' 2>/dev/null); do
        result=$(ps -p "$i")
        if [ "$?" -eq 0 ]; then
            return 0
        else
            printf "\n"
            log_error "pid - $pid just quit unexpectedly, please check logs for more information!"
            exit 1
        fi
    done

    printf "\n"
    log_error "No pid file found, startup may failed. Please check $(clr_str red $LOG_DIR/${SERVICE_NAME}.out) for more information!"
    exit 1
}

function wait_for_start {
    log_info "Waiting for $(clr_str blue $SERVICE_NAME) startup on port $SERVER_PORT"

    local -i max_counter=60 # 48*5=240s
    local -i total_time=0
    local -i current_time

    until [[ ((total_time -ge max_counter)) || "$(curl -X GET --silent --connect-timeout 1 --max-time 2 --head $SERVER_URL | grep "HTTP")" != "" ]]; do
        printf "."
        sleep 1
        current_time=$(date "+%s")
        ((total_time = current_time - app_start_time))
        check_pid_alive
    done

    current_time=$(date "+%s")
    ((total_time = current_time - app_start_time))

    printf "\n"
    if [[ ((total_time -ge max_counter)) ]]; then
        log_warn "Server failed to start in $total_time seconds, cannot connect to the port $SERVER_PORT!"
    else
        log_info "Server started in $total_time seconds!"
    fi

    exit 0
}

function run_on_remote {
    log_info "Starting the $APP_NAME on $(clr_str blue $1):$(clr_str red $SERVER_PORT)"
    ORIG_ARGS[13]=start
    if [ "$1" = "localhost" ] || [ "$1" = "127.0.0.1" ] || [ "$1" = $(hostname) ]; then
        log_debug "exec $JARUN_BASE_DIR/bin/rcall.sh ${ORIG_ARGS[@]}"
        bash "${JARUN_BASE_DIR}/bin/rcall.sh" "${ORIG_ARGS[@]}"
    else
        log_debug "ssh ${APP_USER}${1} $JARUN_BASE_DIR/bin/rcall.sh ${ORIG_ARGS[@]}"
        ssh "${APP_USER}${1}" "export XDEBUG=${DEBUG} && $JARUN_BASE_DIR/bin/rcall.sh" "${ORIG_ARGS[@]}"
    fi
}

# run jar in a container
function docker_jar {
    if ! detect_jar_file; then
        exit 1
    fi

    $JAVA_EXE -ea $JAVA_OPTS -jar $RUN_JAR_FILE $APP_ARGS
}
# use spring JarLauncher in a container
function docker_launcher {
    if [ ! -d $APP_PATH/app ]; then
        log_error "$APP_PATH/app does not exist!!!"
        exit 1
    fi

    cd $APP_PATH/app

    $JAVA_EXE -ea $JAVA_OPTS org.springframework.boot.loader.JarLauncher $APP_ARGS
}
# use spring JarLauncher in a container
function nohup_launcher {
    if [ -n "${RUN_ON_HOSTS[@]}" ]; then
        for host in ${RUN_ON_HOSTS}; do
            if ! run_on_remote $host; then
                exit 1
            fi
        done
        return 0
    fi

    local CPID=$(ps aux | grep "=$SERVICE_HASH" | grep -v grep | awk '{print $2}' 2>/dev/null)

    if [ -n "${CPID}" ]; then
        log_warn "${SERVICE_NAME} is $(clr_str green running), skipping!"
        return 0
    fi

    if [ ! -d $APP_PATH/app ]; then
        log_error "$APP_PATH/app does not exist!!!"
        exit 1
    fi

    cd $APP_PATH/app

    app_start_time=$(date "+%s")
    # run it background
    nohup $JAVA_EXE -ea $JAVA_OPTS org.springframework.boot.loader.JarLauncher $APP_ARGS >$LOG_DIR/${SERVICE_NAME}.out 2>&1 &

    rc=$?

    if [[ $rc != 0 ]]; then
        log_error "Failed to start $SERVICE_NAME, return code: $(clr_str red $rc)"
        exit $rc
    fi

    wait_for_start
}

# run jar in host machine
function nohup_jar {
    if [ -n "${RUN_ON_HOSTS[@]}" ]; then
        for host in ${RUN_ON_HOSTS}; do
            if ! run_on_remote $host; then
                return 1
            fi
        done
        return 0
    fi

    local CPID=$(ps aux | grep "=$SERVICE_HASH" | grep -v grep | awk '{print $2}' 2>/dev/null)

    if [ -n "${CPID}" ]; then
        log_warn "${SERVICE_NAME} is $(clr_str green running), skipping!"
        return 0
    fi

    if ! detect_jar_file; then
        exit 1
    fi

    app_start_time=$(date "+%s")
    # run it background
    nohup $JAVA_EXE -ea $JAVA_OPTS -jar $RUN_JAR_FILE $APP_ARGS >$LOG_DIR/${SERVICE_NAME}.out 2>&1 &

    rc=$?

    if [[ $rc != 0 ]]; then
        log_error "Failed to start $SERVICE_NAME, return code: $rc"
        exit $rc
    fi

    wait_for_start
}

# 保留原始参数（去除hosts)
ORIG_ARGS=("$1" "$2" "$3" "$4" "$5" "$6" "$7" "''" "$9" "${10}" "${11}" "${RUN_MODE}" "${ENV}")

# 初始化变量
APP_ID=$(str_trim_quote "${1}")
APP_NAME=$(str_trim_quote "${2}")
APP_DIR=$(str_trim_quote "${3}")
APP_PATH="${JARUN_BASE_DIR}/${APP_DIR}"
APP_PORT=$(str_trim_quote "${4}")
ACTIVE_PROFILES=$(str_trim_quote "${5}")
APP_LIBS=$(str_trim_quote "${6}")
LOG_DIR=$(str_trim_quote "${7}")
RUN_ON_HOSTS=$(str_trim_quote "${8}")
APP_ARGS=$(str_trim_quote "${9}")
APP_JAR=$(str_trim_quote "${10}")
# 检测启动方式
if [[ $(str_trim_quote "${11}") =~ ^true$ ]]; then
    APP_LAUNCHER='launcher'
else
    APP_LAUNCHER='jar'
fi

if ! prepare_args; then
    exit 1
fi

if [ $# -eq 11 ]; then
    print_envs
fi

case "${RUN_MODE}_${APP_LAUNCHER}" in
docker_jar)
    docker_jar
    ;;
docker_launcher)
    docker_launcher
    ;;
nohup_launcher)
    nohup_launcher
    ;;
*)
    nohup_jar
    ;;
esac
### do not edit above codes #############################################
#########################################################################
